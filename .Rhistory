source('C:/Users/MAL181/Dropbox/2019/rmuddles/deIDent/tangles/pkg/R/tangles.R')
source('C:/Users/MAL181/Dropbox/2019/rmuddles/deIDent/tangles/pkg/R/tangler.R')
library(ithir);library(digest)
data("HV_subsoilpH")
str(HV_subsoilpH)
dat.xy<- HV_subsoilpH[,1:2]
xyData<- as.matrix(dat.xy)
tangles.out<- tangles(data = xyData, depth = 5, rasterdata = FALSE, raster_object = FALSE)
tangles.out
str(tangles.out)
head(tangles.out[[1]])
# tangler
tangled.origi<- tangler(data = tangles.out[[1]], tanglerInfo = tangles.out[[2]], raster_object = FALSE, stub = "hv1")
View(tangled.origi)
View(xyData)
data("HV_subsoilpH")
str(HV_subsoilpH)
dat.xy<- HV_subsoilpH[,1:2]
xyData<- as.matrix(dat.xy)
tangles.out<- tangles(data = xyData, depth = 5, rasterdata = FALSE, raster_object = FALSE)
tangles.out
str(tangles.out)
head(tangles.out[[1]])
tangles.out[[2]]
# tangler
tangled.origi<- tangler(data = tangles.out[[1]], tanglerInfo = tangles.out[[2]], raster_object = FALSE, stub = "hv1")
View(tangled.origi)
getwd()
# tangler
tangled.origi<- tangler(data = as.matrix(tangles.out[[1]]), tanglerInfo = tangles.out[[2]], raster_object = FALSE, stub = "hv1")
View(tangled.origi)
View(HV_subsoilpH)
library(ithir);library(digest)
data("HV_subsoilpH")
str(HV_subsoilpH)
dat.xy<- HV_subsoilpH[,1:2]
xyData<- as.matrix(dat.xy)
tangles.out<- tangles(data = xyData, depth = 3, rasterdata = FALSE, raster_object = FALSE)
tangles.out
str(tangles.out)
head(tangles.out[[1]])
# tangler
tangled.origi<- tangler(data = as.matrix(tangles.out[[1]]), tanglerInfo = tangles.out[[2]], raster_object = FALSE, stub = "hv1")
View(tangled.origi)
## POINT DATA tangles
library(ithir);library(digest);library(tangles)
data("HV_subsoilpH")
str(HV_subsoilpH)
dat.xy<- HV_subsoilpH[,1:2]
xyData<- as.matrix(dat.xy)
# deidentify with 5 levels of abstraction
tangles.out<- tangles(data = xyData, depth = 5, rasterdata = FALSE, raster_object = FALSE)
# RASTER DATA
library(raster)
data("hunterCovariates_sub")
str(hunterCovariates_sub)
tangled.origi<- tangler(data = hunterCovariates_sub, tanglerInfo = tangles.out[[2]], raster_object = TRUE, stub = "hv1")
## POINT DATA tangles
library(ithir);library(digest);library(tangles)
## POINT DATA tangles
library(ithir);library(digest)
data("HV_subsoilpH")
str(HV_subsoilpH)
dat.xy<- HV_subsoilpH[,1:2]
xyData<- as.matrix(dat.xy)
# deidentify with 5 levels of abstraction
tangles.out<- tangles(data = xyData, depth = 5, rasterdata = TRUE, raster_object = FALSE)
# tangle associated RASTER DATA
library(raster)
data("hunterCovariates_sub")
str(hunterCovariates_sub)
tangled.origi<- tangler(data = hunterCovariates_sub, tanglerInfo = tangles.out[[2]], raster_object = TRUE, stub = "hv1")
# PLOT
plot(hunterCovariates_sub[[1]])
coordinates(dat.xy)<- ~ X + Y
plot(dat.xy, add=T)
#deidentified
plot(tangled.origi[[1]])
ndat.xy<- as.data.frame(tangles.out[[1]])
coordinates(ndat.xy)<- X + Y
names(ndat.xy)
coordinates(ndat.xy)<- ~ X + Y
plot(ndat.xy, add = T)
# PLOT (real)
par(mfrow=c(1,2))
plot(hunterCovariates_sub[[1]])
coordinates(dat.xy)<- ~ X + Y
plot(dat.xy, add=T)
#deidentified
plot(tangled.origi[[1]])
ndat.xy<- as.data.frame(tangles.out[[1]])
coordinates(ndat.xy)<- ~ X + Y
plot(ndat.xy, add = T)
?digest
tangles.out[[2]]
tangles.out[[2]][1]
tangles.out[[2]]
xxx<- tangles.out[[2]]
xxx[1]
xxx[2]
tanglerInfo<- tangles.out[[2]]
tanglerInfo[1]
xxx<- tanglerInfo[1]
tanglerInfo[1] == xxx
tanglerInfo[1]
as.character(tanglerInfo[1])
as.character(tanglerInfo[1]) == xxx
as.character(tanglerInfo[1]) =! xxx
as.character(tanglerInfo[1]) != xxx
source('C:/Users/MAL181/Dropbox/2019/rmuddles/deIDent/tangles/pkg/R/detangles.R')
# tangle the points
data("HV_subsoilpH")
str(HV_subsoilpH)
dat.xy<- HV_subsoilpH[,1:2]
xyData<- as.matrix(dat.xy)
tangles.out<- tangles(data = xyData, depth = 15, rasterdata = TRUE, raster_object = FALSE)
tangles.out
tangles.out<- tangles(data = xyData, depth = 5, rasterdata = TRUE, raster_object = FALSE)
tangles.out
# tangle raster data based on tangled points
data("hunterCovariates_sub")
str(hunterCovariates_sub)
tangled.origi<- tangler(data = hunterCovariates_sub, tanglerInfo = tangles.out[[2]], raster_object = TRUE, stub = "hv1")
tangled.origi
plot(tangled.origi[[1]])
# overlay tangle points
tp<- as.data.frame(tangles.out[[1]])
coordinates(tp)<- ~ X + Y
plot(tp, add=T)
tangles.out[[2]]
## detangles
# points
xyData<- as.matrix(tangles.out[[1]])
point_detang<- detangles(data=xyData, tanglerInfo=tangles.out[[2]], raster_object = FALSE, stub = "hv_fix", hash_key = "9ec140a1ed5ff8f80cbd10c7f92abe6a595d2b6ea85c719c3593d0ccc693c179")
#rasters
raster_detang<- detangles(data=tangled.origi, tanglerInfo=detangler.dat, raster_object = TRUE, stub = "hv_fix", hash_key = "9ec140a2ed5ff8f80cbd10c7f92abe6a595d2b6ea85c719c3593d0ccc693c179")
#rasters
raster_detang<- detangles(data=tangled.origi, tanglerInfo=tangles.out[[2]], raster_object = TRUE, stub = "hv_fix", hash_key = "9ec140a2ed5ff8f80cbd10c7f92abe6a595d2b6ea85c719c3593d0ccc693c179")
#rasters
raster_detang<- detangles(data=tangled.origi, tanglerInfo=tangles.out[[2]], raster_object = TRUE, stub = "hv_fix", hash_key = "9ec140a1ed5ff8f80cbd10c7f92abe6a595d2b6ea85c719c3593d0ccc693c179")
plot(raster_detang[[1]])
pdat<- as.data.frame(point_detang)
coordinates(pdat)<- ~X + Y
plot(pdat, add=T)
pdat
library(tangles)
library(tangles)
library(tangles)
?tangles
library(tangles)
xyData<- as.matrix(HV_subsoilpH[,1:2])
# R libraries
library(tangles);library(digest);library(raster);library(sp)
# DATA SETS
# POINT PATTERN
data("HV_subsoilpH")
# RASTER OBJECT
data("hunterCovariates_sub")
xyData<- as.matrix(HV_subsoilpH[,1:2])
tangles.out<- tangles(data = xyData, depth = 3, rasterdata = FALSE, raster_object = FALSE)
str(tangles.out)
# R libraries
library(tangles);library(digest);library(raster);library(sp)
# RASTER OBJECT
data("hunterCovariates_sub")
xyData<- as.matrix(HV_subsoilpH[,1:2])
tangles.out<- tangles(data = xyData, depth = 3, rasterdata = FALSE, raster_object = FALSE)
str(tangles.out)
# First entangle the point pattern
xyData<- as.matrix(HV_subsoilpH[,1:2])
tangles.out<- tangles(data = xyData, depth = 5, rasterdata = TRUE, raster_object = FALSE)
# R libraries
library(tangles);library(digest);library(raster);library(sp)
# DATA SETS
# POINT PATTERN
data("HV_subsoilpH")
# RASTER OBJECT
data("hunterCovariates_sub")
# First entangle the point pattern
xyData<- as.matrix(HV_subsoilpH[,1:2])
tangles.out<- tangles(data = xyData, depth = 5, rasterdata = TRUE, raster_object = FALSE)
# Now entangle the raster object
tangler.out<- tangler(data = hunterCovariates_sub, tanglerInfo = tangles.out[[2]], raster_object = TRUE, stub = "myname")
tangles.out[[2]]
hunterCovariates_sub
tangler
# Now entangle the raster object
tangler.out<- tangler(data = hunterCovariates_sub, tanglerInfo = tangles.out[[2]], raster_object = TRUE, stub = "myname")
data = hunterCovariates_sub
tanglerInfo = tangles.out[[2]]
raster_object = TRUE
stub = "myname"
if (raster_object == TRUE){
tempD <- data.frame(cellNos = seq(1:ncell(data)))
vals <- as.data.frame(getValues(data))
tempD<- cbind(tempD, vals)
tempD <- tempD[complete.cases(tempD), ]
cellNos <- c(tempD$cellNos)
gXY <- data.frame(xyFromCell(data, cellNos, spatial = FALSE))
xyData<- as.matrix(gXY)} else {xyData <- data}
###### Internalised Step Functions
## Step 1 (shifting X)
leap_Xr<- function(xyData=NULL, r.num=NULL){
xyData[,1]<- xyData[,1] + r.num
return(xyData)
}
## Step 2 (shifting Y)
leap_Yr<- function(xyData=NULL, r.num=NULL){
xyData[,2]<- xyData[,2] + r.num
return(xyData)
}
## Step 3 (data rotation)
rotate_XYr<- function(xyData=NULL, deg=NULL, origin.point=NULL){
## Prep data for rotation
x<- t(xyData[,1])
y<- t(xyData[,2])
v = rbind(x,y)
x_center = origin.point[1]
y_center = origin.point[2]
#create a matrix which will be used later in calculations
center <-  v
center[1,]<- as.matrix(x_center)
center[2,]<- as.matrix(y_center)
theta = (deg * pi)/180      # express in radians
R = matrix(c(cos(theta), -sin(theta), sin(theta), cos(theta)), nrow=2)
# do the rotation...
s = v - center    # shift points in the plane so that the center of rotation is at the origin
so = R%*%s           # apply the rotation about the origin
vo = so + center   # shift again so the origin goes back to the desired center of rotation
# pick out the vectors of rotated x- and y-data
xyData<- cbind(vo[1,], vo[2,])
return(xyData)
}
tanglerInfo
for (i in 1:nrow(tanglerInfo$unpicker)){
seq.step<- tanglerInfo$unpicker$step[i]
# if step 1
if(seq.step == 1){
step1.out<- leap_Xr(xyData = xyData , r.num = tanglerInfo$unpicker$leap_dist[i])
# save outputs
xyData<- step1.out}
# if step 2
if(seq.step == 2){
step2.out<- leap_Yr(xyData = xyData, r.num = tanglerInfo$unpicker$leap_dist[i])
# save outputs
xyData<- step2.out}
# if step 3
if(seq.step == 3){
step3.out<- rotate_XYr(xyData = xyData, deg = tanglerInfo$unpicker$degree[i], origin.point = c(tanglerInfo$unpicker$origin_X[i], tanglerInfo$unpicker$origin_Y[i]))
# save outputs
xyData<- step3.out}}
xyData<- as.data.frame(xyData)
names(xyData)<- c("X", "Y")
## Need capture output to save hash key to a readme file
hash.out<- tanglerInfo$hash
# rasterise tabular data
if (raster_object == TRUE){
tDat<- cbind(xyData, tempD)
if (ncol(tDat) > 4){
rasterOuts<- stack()
for (z in 4:ncol(tDat)){
rasterOuts<- stack(rasterOuts, rasterFromXYZ(tDat[,c(1,2,z)]))}
} else {
rasterOuts<- rasterFromXYZ(tDat[,c(1,2,4)])}
# write revised coordinates to file
nm2<- paste0(getwd(), "/tanglerXY_",stub, "_", hash.out, ".rds")
saveRDS(object = rasterOuts, file = nm2)
return(rasterOuts)} else {
# write revised coordinates to file
nm2<- paste0(getwd(), "/tanglerXY_",stub, "_", hash.out, ".rds")
saveRDS(object = xyData, file = nm2)
return(xyData)}}
# Now entangle the raster object
tangler.out<- tangler(data = hunterCovariates_sub, tanglerInfo = tangles.out[[2]], raster_object = TRUE, stub = "myname")
if (raster_object == TRUE){
tempD <- data.frame(cellNos = seq(1:ncell(data)))
vals <- as.data.frame(getValues(data))
tempD<- cbind(tempD, vals)
tempD <- tempD[complete.cases(tempD), ]
cellNos <- c(tempD$cellNos)
gXY <- data.frame(xyFromCell(data, cellNos, spatial = FALSE))
xyData<- as.matrix(gXY)} else {xyData <- data}
###### Internalised Step Functions
## Step 1 (shifting X)
leap_Xr<- function(xyData=NULL, r.num=NULL){
xyData[,1]<- xyData[,1] + r.num
return(xyData)
}
## Step 2 (shifting Y)
leap_Yr<- function(xyData=NULL, r.num=NULL){
xyData[,2]<- xyData[,2] + r.num
return(xyData)
}
## Step 3 (data rotation)
rotate_XYr<- function(xyData=NULL, deg=NULL, origin.point=NULL){
## Prep data for rotation
x<- t(xyData[,1])
y<- t(xyData[,2])
v = rbind(x,y)
x_center = origin.point[1]
y_center = origin.point[2]
#create a matrix which will be used later in calculations
center <-  v
center[1,]<- as.matrix(x_center)
center[2,]<- as.matrix(y_center)
theta = (deg * pi)/180      # express in radians
R = matrix(c(cos(theta), -sin(theta), sin(theta), cos(theta)), nrow=2)
# do the rotation...
s = v - center    # shift points in the plane so that the center of rotation is at the origin
so = R%*%s           # apply the rotation about the origin
vo = so + center   # shift again so the origin goes back to the desired center of rotation
# pick out the vectors of rotated x- and y-data
xyData<- cbind(vo[1,], vo[2,])
return(xyData)
}
for (i in 1:nrow(tanglerInfo$unpicker)){
seq.step<- tanglerInfo$unpicker$step[i]
# if step 1
if(seq.step == 1){
step1.out<- leap_Xr(xyData = xyData , r.num = tanglerInfo$unpicker$leap_dist[i])
# save outputs
xyData<- step1.out}
# if step 2
if(seq.step == 2){
step2.out<- leap_Yr(xyData = xyData, r.num = tanglerInfo$unpicker$leap_dist[i])
# save outputs
xyData<- step2.out}
# if step 3
if(seq.step == 3){
step3.out<- rotate_XYr(xyData = xyData, deg = tanglerInfo$unpicker$degree[i], origin.point = c(tanglerInfo$unpicker$origin_X[i], tanglerInfo$unpicker$origin_Y[i]))
# save outputs
xyData<- step3.out}}
xyData<- as.data.frame(xyData)
names(xyData)<- c("X", "Y")
## Need capture output to save hash key to a readme file
hash.out<- tanglerInfo$hash
tDat<- cbind(xyData, tempD)
if (ncol(tDat) > 4){
rasterOuts<- stack()
for (z in 4:ncol(tDat)){
rasterOuts<- stack(rasterOuts, rasterFromXYZ(tDat[,c(1,2,z)]))}
} else {
rasterOuts<- rasterFromXYZ(tDat[,c(1,2,4)])}
rasterOuts<- stack()
for (z in 4:ncol(tDat)){
rasterOuts<- stack(rasterOuts, rasterFromXYZ(tDat[,c(1,2,z)]))}
head(tDat)
z=4
rasterFromXYZ(tDat[,c(1,2,z)])
plot(tDat[,1], tDat[,2])
?maxmemory
??maxmemory
?rasterFromXYZ
tDat[,c(1,2,z)]
rasterFromXYZ(tDat[,c(1,2,z)])
setOptions(maxmemory = 1e+09, chunksize=1e+08)
# R libraries
library(tangles);library(digest);library(raster);library(sp)
setOptions(maxmemory = 1e+09, chunksize=1e+08)
rasterOptions()
rasterFromXYZ(tDat[,c(1,2,z)])
nrow(tD)
nrow(tDat)
str(tempD)
tempD <- data.frame(cellNos = seq(1:ncell(data)))
vals <- as.data.frame(getValues(data))
tempD<- cbind(tempD, vals)
tempD <- tempD[complete.cases(tempD), ]
cellNos <- c(tempD$cellNos)
gXY <- data.frame(xyFromCell(data, cellNos, spatial = FALSE))
xyData<- as.matrix(gXY)} else {xyData <- data}
if (raster_object == TRUE){
tempD <- data.frame(cellNos = seq(1:ncell(data)))
vals <- as.data.frame(getValues(data))
tempD<- cbind(tempD, vals)
tempD <- tempD[complete.cases(tempD), ]
cellNos <- c(tempD$cellNos)
gXY <- data.frame(xyFromCell(data, cellNos, spatial = FALSE))
xyData<- as.matrix(gXY)} else {xyData <- data}
tDat<- cbind(xyData, tempD)
if (ncol(tDat) > 4){
rasterOuts<- stack()
for (z in 4:ncol(tDat)){
rasterOuts<- stack(rasterOuts, rasterFromXYZ(tDat[,c(1,2,z)]))}
} else {
rasterOuts<- rasterFromXYZ(tDat[,c(1,2,4)])}
rasterFromXYZ(tDat[,c(1,2,z)])
# First entangle the point pattern
xyData<- as.matrix(HV_subsoilpH[,1:2])
tangles.out<- tangles(data = xyData, depth = 5, rasterdata = TRUE, raster_object = FALSE)
# Now entangle the raster object
tangler.out<- tangler(data = hunterCovariates_sub, tanglerInfo = tangles.out[[2]], raster_object = TRUE, stub = "myname")
tangler.out
tangles.out[[2]]
plot(tangler.out[[1]])
hunterCovariates_sub
tangler.out
# First entangle the point pattern
xyData<- as.matrix(HV_subsoilpH[,1:2])
tangles.out<- tangles(data = xyData, depth = 5, rasterdata = TRUE, raster_object = FALSE)
# Now entangle the raster object
tangler.out<- tangler(data = hunterCovariates_sub, tanglerInfo = tangles.out[[2]], raster_object = TRUE, stub = "myname")
tangles.out[[2]]
tangler.out
plot(tangler.out[[1]])
# Plotting
# original data
pHV_subsoilpH<- HV_subsoilpH
coordinates(pHV_subsoilpH)<- ~ X + Y
plot(hunterCovariates_sub[[1]])
plot(pHV_subsoilpH, add=T)
plot(hunterCovariates_sub[[1]])
plot(pHV_subsoilpH, add=T)
plot(hunterCovariates_sub[[1]])
plot(pHV_subsoilpH, add=T)
plot(hunterCovariates_sub[[1]], main="orginal data")
plot(pHV_subsoilpH, add=T)
pHV_subsoilpH
plot(hunterCovariates_sub[[1]], main="orginal data")
points(pHV_subsoilpH, add=T)
plot(pHV_subsoilpH)
plot(hunterCovariates_sub[[1]], main="orginal data", add=T)
plot(hunterCovariates_sub[[1]], main="orginal data")
plot(pHV_subsoilpH, add=T)
plot(hunterCovariates_sub[[1]], main="orginal data");plot(pHV_subsoilpH, add=T)
plot(hunterCovariates_sub[[1]], main="orginal data"); plot(pHV_subsoilpH, add=T)
# tangled data
tPP<- as.data.frame(tangles.out[[1]])
coordinates(tPP)<- ~ X + Y
plot(tangler.out[[1]])
plot(tangler.out[[1]], main="tangled data");plot(tPP, add=T)
# Plotting
par(mfrow=c(1,2))
# original data
pHV_subsoilpH<- HV_subsoilpH
coordinates(pHV_subsoilpH)<- ~ X + Y
plot(hunterCovariates_sub[[1]], main="orginal data"); plot(pHV_subsoilpH, add=T)
# tangled data
tPP<- as.data.frame(tangles.out[[1]])
coordinates(tPP)<- ~ X + Y
plot(tangler.out[[1]], main="tangled data");plot(tPP, add=T)
plot(hunterCovariates_sub[[1]], main="orginal data"); plot(pHV_subsoilpH, add=T)
plot(tangler.out[[1]], main="tangled data");plot(tPP, add=T)
# Plotting
par(mfrow=c(1,2))
# original data
pHV_subsoilpH<- HV_subsoilpH
coordinates(pHV_subsoilpH)<- ~ X + Y
plot(hunterCovariates_sub[[1]], main="orginal data"); plot(pHV_subsoilpH, add=T)
# tangled data
tPP<- as.data.frame(tangles.out[[1]])
coordinates(tPP)<- ~ X + Y
plot(tangler.out[[1]], main="tangled data");plot(tPP, add=T)
# Plotting
par(mfrow=c(1,2))
# original data
pHV_subsoilpH<- HV_subsoilpH
coordinates(pHV_subsoilpH)<- ~ X + Y
plot(hunterCovariates_sub[[1]], main="orginal data"); plot(pHV_subsoilpH, add=T)
# tangled data
tPP<- as.data.frame(tangles.out[[1]])
coordinates(tPP)<- ~ X + Y
plot(tangler.out[[1]], main="tangled data");plot(tPP, add=T)
devtools::build_vignettes()
devtools::build_vignettes()
library(devtools)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(tangles)
load("Z:/Dropbox/2019/rmuddles/deIDent/data/detangler_data.rda")
load("Z:/Dropbox/2019/rmuddles/deIDent/data/detangler_data.rda")
load("Z:/Dropbox/2019/rmuddles/deIDent/data/detanglerData.rda")
load("Z:/Dropbox/2019/rmuddles/deIDent/data/detangler_data.rda")
getwd()
setwd("Z:/Dropbox/2019/rmuddles/deIDent/data/")
save(detangler_data, file="detangler_data.rda", compress='xz')
load("Z:/Dropbox/2019/rmuddles/deIDent/data/hunterCovariates_sub.rda")
save(hunterCovariates_sub, file="hunterCovariates_sub.rda", compress='xz')
load("Z:/Dropbox/2019/rmuddles/deIDent/data/HV_subsoilpH.rda")
save(HV_subsoilpH, file="HV_subsoilpH.rda", compress='xz')
library(tangles)
devtools::build_vignettes()
devtools::build_vignettes()
library(tangles)
library(tangles)
devtools::build_vignettes()
library(tangles)
library(tangles)
